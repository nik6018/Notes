The Basics of the GIT
--------------------
	
	1. Git is based on the Graph theroy 
		=>Nodes : as Commits
		=>Edges : as references or branches

	2. Most VCS only store the recent version of the file 
	   =>Git thinks of its data more like a set of snapshots of a miniature 
	     filesystem. 
	   =>Every time you commit, or save the state of your project in Git, 
             it basically takes a picture of what all your files look like at that 
             moment and stores a reference to that snapshot. 
	   =>To be efficient, if files have not changed, Git doesn.t store the file again, 
	     just a link to the previous identical file it has already stored. 
	     Git thinks about its data more like a stream of snapshots.
	 Ref to this image (http://git-scm.com/book/en/v2/book/01-introduction/images/deltas.png) 
	 Ref to this image (http://git-scm.com/book/en/v2/book/01-introduction/images/snapshots.png)
	
	3. In git everthing is local and as the changes to the remote repo doesnt need to commited
	   immedietly so the working offline is very easy and require to push only when it is required

	4. Git Mainly has 3 states
		-----Working-------Staging-------.git/repo--------
		
		working => this is the state when you are modifying the files after a checkout  and havent done any 
			   git operation

		staging => this state is achieved when modification to the files are been done
			   and they are queqed up to commit 
			   OR
			   (here the snapshot of the entire  repo is also taken)

		git dir => here the queqed up files which are ready to commit are commit permenantly commit to the
		           to the the DB of the git
			   OR
			   (here the snapshot are permenantly commit to the DB)

		Summary :
				The basic Git workflow goes something like this:

					a.You modify files in your working directory.

					b.You stage the files, adding snapshots of them to your staging area.

					c.You do a commit, which takes the files as they are in the staging area and stores that 
                                          snapshot permanently to your Git directory.
	
					
				Remember that each file in your working directory can be in one of two states: tracked or untracked. 
				Tracked files are files that were in the last snapshot; they can be unmodified, modified, or staged. 
				Untracked files are everything else . any files in your working directory that were not in your last 
				snapshot and are not in your staging area. 
				When you first clone a repository, all of your files will be tracked and unmodified because you just 
				checked them out and haven.t edited anything.	
				Ref(https://git-scm.com/book/en/v2/book/02-git-basics/images/lifecycle.png)
	
Commands
--------
	
	git status => shows the current branch and shows the modified files and staged files
		      Untracked basically means that Git sees a file you didn.t have in the previous snapshot (commit)

	git diff => gives all the differences between the staged file and the previous snapshot of the file

	git commit => this will commit all the files that were staged (remember)and not the changes that were modified after
		      staging the file . It opens ur default editor and shows the git status after commit . 
		      git commit -v :  it also store the diff of the files between the previous and the current
		      snapshot .

	git rm => removes the file from the staging area and also the working directory so when u do git status next time the 
		  file wont show up as an untracked file.
		  git rm --cached filename.ext : removes the file from the .git directory only and not the working directory
		  git rm log/\*.log removes all the .log files in the log directory
		  git rm \~ deletes all the files ending with ~ sign

	git mv => mainly used to rename files , this command is very usefull as it renames the file , removes the old file 
		  from the staging area and then add the renamed file to the staging area 
	
	git log => show the heirachy of the commit history
		   git log -p : shows the diff
		   git log -diff  : shows the number of additions and deletions


	git commit --amend => this is used too group multiple commits into one . if you wan to change ur commit message then
			      use this and change the message and this will override the previous snapshot. OR
			      if you forget to stage a file during commit then stage the file and use this command
			      and type the new commit mesage


	git reset HEAD file_name => this is  used to unstage the file if you add it accidently
	
	git checkout -- filename => if you modify a file and now want the file which was unmodified 

	git remote => this command is used to see the remote repos name (By default it is origin)
		      git remote -v : shows the name and the url of the remote repos
		      if you are insterested in cloning a repo with the original "origin" name then use
		      git remote [sudo name] [URL] : so always do (git push [sudo name] [branch name])
		      git remote show [sudo name] : shows more info about the remote
		      git remote rename [old sudo name] [new sudo name] : renames the sudo name of the remote
		

	git tag => this is to tag a certain release in the graph of a software .tags are basically pointer to a certain 
		   commit in the graph and they never change and always point to the same commit even if the branch moves forward
		   and that pointer can also be given a serial no(v1.4)they are of two types.

		   LightWeight Tags : they are mostly used to temp tag on branch (example ->git tag "1.2.3W")
		   Annotated Tags : Used to indicate a certain release of a software and contain lots of info when the
				    branch is  tagged (example ->git tag -a v1.4 -m "tag message")

	git branch [branch_name] => this creates a branch but doesnt switch to that branch
	
	git checkout [branch_name] => moves the HEAD pointer to the specified branch

Git Branching
-------------	

	Remember that git stores data as series of snapshot , and this is how it makes sense of the entire commit history
	unlike other SCM is doesnt store only the last changed text .
	
	Overview of an commit : 
	+++++++++++++++++++++++
	When you make a commit, Git stores a commit object that contains a pointer to the snapshot of the content you staged. 
	This object also contains the author.s name and email, the message that you typed, 
	and pointers to the commit or commits that directly came before this commit (its parent or parents): zero parents for the initial commit, 
	one parent for a normal commit, and multiple parents for a commit that results from a merge of two or more branches.	

	Commit Process  :
	+++++++++++++++++
	So when git add is done git creates the checksums(blobs) of all the files in that snapshot and when git commit is done then git creates a root node 
	which points to all the files that were staged and stores which blob corresponds to which file and finally git also creates a pointer which points
	to this root node it contains all the metadata of the commit (like:author,email,etc).thus every commit consist of one metadata object which points to
	the root node which holds the blobs of all the files which have been staged and the files themselves which consist of the individual blobs of their files
	Ref Image(https://git-scm.com/book/en/v2/book/03-git-branching/images/commit-and-tree.png)
	Ref Image(https://git-scm.com/book/en/v2/book/03-git-branching/images/commits-and-parents.png)
	
	Branch :
	++++++++
	A branch in Git is simply a lightweight movable pointer to one of these commits. 
	The default branch name in Git is master. 
	As you start making commits, you.re given a master branch that points to the last commit you made. 
	Every time you commit, it moves forward automatically.
		
	Cheap Branching :
	+++++++++++++++++
	Because a branch in Git is in actuality a simple file that contains the 40 character SHA-1 checksum of the commit it points to, 
	branches are cheap to create and destroy. 
	Creating a new branch is as quick and simple as writing 41 bytes to a file (40 characters and a newline).	
	

	

